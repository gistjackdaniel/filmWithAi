1. RealLocation, Group의 정의

RealLocation은 하나의 건물 내에서 상대적인 실제 장소를 의미하는거야. 예를 들면 103호 강의실, 3층 복도가 "RealLocation"이 되겠지.
Group은 하나의 건물 단위를 나타내. "서울과학고등학교" 같은 것이 되겠지.

realLocation은 3개의 attribute로 구성되어있어. ProjectId, 이름, groupId.
ProjectId는 속한 프로젝트의 id. 이름은 realLocation의 장소 이름, "103호 강의실" 같은거지. groupId은 자신이 속한 group의 objectId야.

group은 3개의 attribute로 구성되어있어. ProjectId, 이름, 주소.
ProjectId는 속한 프로젝트의 id. 이름은 건물의 이름, "서울과학고등학교" 같은거지. 주소는 건물의 주소야. string으로 저장하지.
ㅈㅈ
각 씬(backend에서는 conte)에는 keyword.realLocationId라는 필드를 추가해야 돼. 씬이 위치한 realLocation의 Id를 저장하는거야.

처음 conte를 만들 때는 각 씬마다 장소와 같은 이름의 realLocation을 생성해. 이미 그런 realLocation이 있다면 그 realLocation을 적용하지.
그리고 conte의 realLocation은 장소와 같은 이름의 realLocation으로 설정하자.

모든 realLocation가 groupId를 가질 필요는 없어. 비어있을 수 있지.
마찬가지로 모든 씬(backend에서는 conte)가 realLocationId를 가질 필요는 없어.

2. realLocation / group의 crud

realLocation, group의 crud에 관한 창을 만드려고 해. 스케쥴을 만드는 창 내부에 "위치 관리 버튼"을 만드려고 해. 
대략적인 아이디어를 설명해줄게.
2개의 세부 탭으로 나뉘어져있어. group 관리 탭, realLocation 관리 탭.
group 관리 탭에는 여러 group들이 나열되어있어. 
    (api: group의 목록을 불러오는 기능)
한 group을 클릭하면 그룹에 대한 상세 정보를 수정할 수 있는 팝업이 뜨는거야. 
주소를 수정할 수 있고, 그룹에 속하는 realLocation을 추가/제거할 수 있어.
    (api: group에 속한 realLocation 조회 기능)
    (api: group의 주소 수정 기능)
    (* 그룹에 속하는 realLocation 추가/제거는 realLocation의 api를 사용하면 된다)
그룹을 삭제, 생성할 수도 있어야겠지
    (api: group 생성/삭제 기능, 삭제할 때는 참조하는 realLocation을 찾아서 group을 null로 바꾸기)


realLocation 관리 탭에는 여러 realLocation이 있어.
    (api: realLocation 목록을 불러오는 기능)
한 realLocation을 클릭하면 상세 정보를 수정할 수 있는 팝업이 떠. 
속한 그룹 수정, 이름 변경, 이 realLocation에서 촬영하는 scene(backend에서는 conte) 추가/제거할 수 있어.
    (api: realLocation에서 촬영하는 scene 조회 기능)
    (api: realLocation의 group/이름 수정하는 기능)
    (* realLocation에서 촬영하는 scene을 추가/제거하는 기능은 conte의 api를 사용하면 된다)
realLocation을 생성/삭제할 수 있어야 돼.
    (api: realLocation 생성/삭제 기능, 삭제할 때는 참조하는 conte를 찾아서 realLocation을 null로 바꾸기)

realLocation이 어떠한 group에도 안 속하면 null로 남겨놓을거야.

realLocation이 속한 group을 바꿀 때는 기존 그룹에서 빠지고, 새 그룹으로 옮겨. (→ 한 번에 하나의 그룹만 소속 가능)

realLocation / group을 삭제하면 해당 realLocation/group을 참조하던 scene(backend에서는 conte)/realLocation은 realLocation/group을 null로 남겨놓을거야. 
나중에 frontend에서 보여줄 때는 "미분류"로 보이겠지

3. 스케쥴링 알고리즘

realLocation이 없는 씬은 "빈 realLocation"이라는 임시 realLocation을 할당해주자.
만약 그런 씬이 있으면 스케쥴링이 끝나고 '촬영 위치를 채워주세요'라는 안내문을 띄우자.
그룹이 없는 realLocation은 '빈 group'이라는 임시 그룹에 할당해주자.
만약 그런 realLocation이 있으면 "그룹을 할당해주세요"라는 안내문을 띄우자.
이제 같은 그룹에 있는 realLocation을 가지는 씬들을 묶을거야. 그리고 각 그룹에 대해 고정된 realLocation의 씬이 구간을 이루도록 재배치해. 
그리고 이걸 여러 날에 걸쳐 분배하는데, 앞에서부터 보면서 하루의 총 촬영시간이 8시간 이내가 되도록 잘라서 각 날에 배치하는거야.
이제 각 날에 무슨 씬을 찍는지 정해졌으면 아래와 같이 스케쥴을 짜.
1. 6시에 집합
2. 7시 출발
3. 리허설(이건 전체 촬영 시간의 1/5)
이제 각 씬별로 걸리는 시간을 계산할거야. 앞 씬과 realLocation이 다르면 세팅시간 30분이 앞에 붙어. (가장 먼저 찍는 씬도 세팅시간 30분이 있어)
4. 점심시간은 11시 이후 가장 빠른 씬 촬영 종료 이후에 시작하고 1시간 지속돼.
5. 저녁시간은 (점심시간 + 6시간) 이후 가장 빠른 씬 촬영 종료 이후에 시작하고 1시간 지속돼.

끝나고 나서 스케쥴은 db에 저장한다.

contes, realLocations, groups, projectId를 인자로 가지고 schedule을 리턴하는 스케쥴링 알고리즘 함수를 만들자.