import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Cut } from './schema/cut.schema';
import { 
  CreateCutRequestDto, 
  UpdateCutRequestDto,
  CreateCutDraftRequestDto
} from './dto/request.dto';
import { 
  CutResponseDto
} from './dto/response.dto';
import { AiService } from 'src/ai/ai.service';
import { SceneService } from 'src/scene/scene.service';
import { SceneResponseDto } from 'src/scene/dto/response.dto';
import { ProjectService } from 'src/project/project.service';
import { StorageFactoryService } from '../common/services/storage-factory.service';
import * as fs from 'fs';

@Injectable()
export class CutService {
  constructor(
    @InjectModel(Cut.name) private cutModel: Model<Cut>,
    private aiService: AiService,
    private sceneService: SceneService,
    private projectService: ProjectService,
    private storageFactoryService: StorageFactoryService
  ) {}

  async create(projectId: string, sceneId: string, createCutDto: CreateCutRequestDto): Promise<CutResponseDto> {
    const cut = new this.cutModel({
      ...createCutDto,
      isDeleted: false,
      projectId: new Types.ObjectId(projectId),
      sceneId: new Types.ObjectId(sceneId),
    });
    
    const savedCut = await cut.save();
    return this.mapToResponseDto(savedCut);
  }

  async createDraft(projectId: string, sceneId: string, createCutDraftRequestDto: CreateCutDraftRequestDto): Promise<CutResponseDto[]> {
    const project = await this.projectService.findById(projectId);
    const scene = await this.sceneService.findById(projectId, sceneId);
    const { maxCuts } = createCutDraftRequestDto;
    const { genre } = project;

    // Ïî¨ Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú Ïª∑ ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏ ÏûëÏÑ±
    const cutPrompt = await this.buildCutPrompt(maxCuts, genre, scene);

    const result = await this.aiService.callChatCompletions([
      {
        role: 'system',
        content: 'ÎãπÏã†ÏùÄ ÏòÅÌôî Ï¥¨ÏòÅ Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Ï†ïÌôïÌûà 3Í∞úÏùò Ïª∑Îßå ÏÉùÏÑ±ÌïòÍ≥† Ïú†Ìö®Ìïú JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî. Í∞ÑÍ≤∞ÌïòÍ≤å ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.'
      },
      {
        role: 'user',
        content: cutPrompt
      }
    ], { max_tokens: 4000, temperature: 0.3 });

    // AI ÏùëÎãµÏùÑ ÌååÏã±Ìï¥ÏÑú draft Ïª∑ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    const parsedCuts = this.parseCutDraftResponse(result);
    
    // draft Îç∞Ïù¥ÌÑ∞Ïóê projectIdÏôÄ sceneId Ï∂îÍ∞Ä
    const draftCuts: CutResponseDto[] = parsedCuts.map((cutData, index) => ({
      ...cutData,
      _id: new Types.ObjectId(), // ÏûÑÏãú ID
      sceneId: new Types.ObjectId(sceneId),
      projectId: new Types.ObjectId(projectId),
      order: cutData.order || (index + 1)
    }));

    return draftCuts;
  }

  private parseCutDraftResponse(content: string): CutResponseDto[] {
    console.log('üîç LLM ÏõêÎ≥∏ ÏùëÎãµ:', content.substring(0, 300) + '...');
    
    // ÎßàÌÅ¨Îã§Ïö¥ ÏΩîÎìú Î∏îÎ°ù Ï†úÍ±∞
    let jsonContent = content;
    
    // ```json ... ``` ÌòïÌÉúÏùò ÏΩîÎìú Î∏îÎ°ù Ï†úÍ±∞
    if (content.includes('```json')) {
      const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        jsonContent = jsonMatch[1].trim();
      }
    }
    
    // ``` ... ``` ÌòïÌÉúÏùò ÏΩîÎìú Î∏îÎ°ù Ï†úÍ±∞
    if (jsonContent.includes('```')) {
      const codeMatch = jsonContent.match(/```\s*([\s\S]*?)\s*```/);
      if (codeMatch) {
        jsonContent = codeMatch[1].trim();
      }
    }
    
    // JSON Í∞ùÏ≤¥ ÏãúÏûëÍ≥º ÎÅù Ï∞æÍ∏∞
    const jsonStart = jsonContent.indexOf('{');
    const jsonEnd = jsonContent.lastIndexOf('}');
    
    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
      jsonContent = jsonContent.substring(jsonStart, jsonEnd + 1);
    }
    
    console.log('üîç LLM ÏùëÎãµ Ï†ïÎ¶¨ ÌõÑ:', jsonContent.substring(0, 200) + '...');

    try {
      // JSON ÌååÏã± ÏãúÎèÑ
      let parsed;
      try {
        parsed = JSON.parse(jsonContent);
      } catch (parseError) {
        console.error('‚ùå JSON ÌååÏã± Ïã§Ìå®, Ïû¨ÏãúÎèÑ Ï§ë...');
        
        // Îçî Í∞ïÎ†•Ìïú JSON ÏàòÏ†ï ÏãúÎèÑ
        let fixedContent = jsonContent
          .replace(/,\s*}/g, '}') // ÎßàÏßÄÎßâ ÏâºÌëú Ï†úÍ±∞
          .replace(/,\s*]/g, ']') // Î∞∞Ïó¥ ÎßàÏßÄÎßâ ÏâºÌëú Ï†úÍ±∞
          .replace(/undefined/g, '""') // undefinedÎ•º Îπà Î¨∏ÏûêÏó¥Î°ú
          .replace(/null/g, '""') // nullÏùÑ Îπà Î¨∏ÏûêÏó¥Î°ú
          .replace(/NaN/g, '0') // NaNÏùÑ 0ÏúºÎ°ú
          .replace(/,\s*"([^"]+)":\s*$/gm, '') // Î∂àÏôÑÏ†ÑÌïú ÏÜçÏÑ± Ï†úÍ±∞
          .replace(/,\s*"([^"]+)":\s*"[^"]*$/gm, '') // Î∂àÏôÑÏ†ÑÌïú Î¨∏ÏûêÏó¥ Í∞í Ï†úÍ±∞
          .replace(/,\s*"([^"]+)":\s*\{[^}]*$/gm, '') // Î∂àÏôÑÏ†ÑÌïú Í∞ùÏ≤¥ Ï†úÍ±∞
          .replace(/,\s*"([^"]+)":\s*\[[^\]]*$/gm, '') // Î∂àÏôÑÏ†ÑÌïú Î∞∞Ïó¥ Ï†úÍ±∞;
        
        // Î∂àÏôÑÏ†ÑÌïú cutList Î∞∞Ïó¥ ÏàòÏ†ï
        if (fixedContent.includes('"cutList": [')) {
          const cutsStart = fixedContent.indexOf('"cutList": [');
          const cutsEnd = fixedContent.lastIndexOf(']');
          if (cutsEnd > cutsStart) {
            const beforeCuts = fixedContent.substring(0, cutsStart);
            const afterCuts = fixedContent.substring(cutsEnd + 1);
            fixedContent = beforeCuts + '"cutList": []' + afterCuts;
          }
        }
        
        try {
          parsed = JSON.parse(fixedContent);
        } catch (secondError) {
          console.error('‚ùå JSON ÌååÏã± Ïû¨ÏãúÎèÑ Ïã§Ìå®:', secondError.message);
          
          // ÏµúÌõÑÏùò ÏàòÎã®: Í∏∞Î≥∏ JSON Íµ¨Ï°∞ ÏÉùÏÑ±
          console.log('‚ö†Ô∏è Í∏∞Î≥∏ JSON Íµ¨Ï°∞Î°ú ÎåÄÏ≤¥');
          parsed = {
            cutList: []
          };
        }
      }
      
      // cutList Î∞∞Ïó¥ Í≤ÄÏ¶ù Î∞è ÏÉùÏÑ±
      if (parsed && parsed.cutList && Array.isArray(parsed.cutList) && parsed.cutList.length > 0) {
        console.log('‚úÖ LLM ÏùëÎãµ Íµ¨Ï°∞ Í≤ÄÏ¶ù ÏÑ±Í≥µ:', parsed.cutList.length, 'Í∞ú Ïª∑');
        
        // Í∞Å Ïª∑ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Î∞è Ï†ïÎ¶¨
        const cutData: Array<CutResponseDto> = parsed.cutList.map((cut: any, index: number) => {
          // NaN Í∞íÎì§ÏùÑ Ï†ÅÏ†àÌïú Í∏∞Î≥∏Í∞íÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
          const cleanDuration = (duration: any) => {
            if (typeof duration === 'string') {
              // "NaNÏ¥à", "5Ï¥à" Îì±Ïùò Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨
              const match = duration.match(/(\d+)Ï¥à/);
              return match ? parseInt(match[1]) : 5;
            }
            if (typeof duration === 'number' && !isNaN(duration) && duration > 0) {
              return duration;
            }
            return 5; // Í∏∞Î≥∏Í∞í
          };

          const cleanNumber = (value: any) => {
            if (typeof value === 'number' && !isNaN(value) && value >= 0) {
              return value;
            }
            return 0;
          };

          const cleanString = (value: any) => {
            return typeof value === 'string' ? value.trim() : '';
          };

          // Cut Î™®Îç∏Ïóê ÎßûÎäî ÏïàÏ†ÑÌïú Ïª∑ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
          return {
            _id: new Types.ObjectId(),
            sceneId: new Types.ObjectId(),
            projectId: new Types.ObjectId(),
            shotNumber: cleanNumber(cut.shotNumber) || (index + 1),
            title: cleanString(cut.title) || `Shot ${index + 1}`,
            description: cleanString(cut.description) || cleanString(cut.title) || `Shot ${index + 1}`,
            cameraSetup: {
              shotSize: cleanString(cut.cameraSetup?.shotSize) || 'MS',
              angleDirection: cleanString(cut.cameraSetup?.angleDirection) || 'Eye-level',
              cameraMovement: cleanString(cut.cameraSetup?.cameraMovement) || 'Static',
              lensSpecs: cleanString(cut.cameraSetup?.lensSpecs) || '50mm f/1.8',
              cameraSettings: cut.cameraSetup?.cameraSettings || {
                aperture: 'f/2.8',
                shutterSpeed: '1/60',
                iso: '800'
              }
            },
            vfxEffects: cleanString(cut.vfxEffects) || 'ÌäπÏàò Ìö®Í≥º ÏóÜÏùå',
            soundEffects: cleanString(cut.soundEffects) || 'Î∞∞Í≤ΩÏùå',
            directorNotes: cleanString(cut.directorNotes) || '',
            dialogue: cleanString(cut.dialogue) || '',
            narration: cleanString(cut.narration) || '',
            subjectMovement: cut.subjectMovement || [],
            productionMethod: cleanString(cut.productionMethod) || 'live_action',
            productionMethodReason: cleanString(cut.productionMethodReason) || 'Ïã§ÏÇ¨ Ï¥¨ÏòÅÏúºÎ°ú ÏûêÏó∞Ïä§Îü¨Ïö¥ Î∂ÑÏúÑÍ∏∞ Ïó∞Ï∂ú',
            estimatedDuration: cleanDuration(cut.estimatedDuration),
            specialRequirements: cut.specialRequirements || {
              specialCinematography: {
                drone: false,
                crane: false,
                jib: false,
                underwater: false,
                aerial: false
              },
              specialEffects: {
                vfx: false,
                pyrotechnics: false,
                smoke: false,
                fog: false,
                wind: false,
                rain: false,
                snow: false,
                fire: false,
                explosion: false,
                stunt: false
              },
              specialLighting: {
                laser: false,
                strobe: false,
                blackLight: false,
                uvLight: false,
                movingLight: false,
                colorChanger: false
              },
              safety: {
                requiresMedic: false,
                requiresFireSafety: false,
                requiresSafetyOfficer: false
              }
            },
            imageUrl: cleanString(cut.imageUrl) || '',
            order: cleanNumber(cut.shotNumber) || (index + 1),
            isDeleted: false
          };
        });
        
        return cutData;
      } else {
        throw new Error('AI ÏùëÎãµÏùÑ ÌååÏã±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('JSON ÌååÏã± Ïã§Ìå®:', error);
      console.error('ÌååÏã± ÏãúÎèÑÌïú ÎÇ¥Ïö©:', jsonContent);
      throw new Error('AI ÏùëÎãµÏùÑ ÌååÏã±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  }

  async buildCutPrompt(maxCuts: number, genre: string[], scene: SceneResponseDto): Promise<string> {
    return `
title - ${scene.title}
description - ${scene.description}
dialogues - ${JSON.stringify(scene.dialogues)}
sceneDateTime - ${scene.timeOfDay}
weather - ${scene.weather}
lighting - ${JSON.stringify({
  description: scene.lighting.description,
  colorTemperature: scene.lighting.setup.overall.colorTemperature,
  mood: scene.lighting.setup.overall.mood
})}
place - ${scene.scenePlace}
cast - ${JSON.stringify(scene.cast)}
visualDescription - ${scene.visualDescription}
vfxRequired - ${scene.vfxRequired}
sfxRequired - ${scene.sfxRequired}
genre - ${genre.join(', ')}
estimatedDuration - ${scene.estimatedDuration}

ÏµúÎåÄ ${maxCuts}Í∞ú Ïª∑ÏùÑ Îã§Ïùå ÌòïÏãùÏúºÎ°ú ÏÉùÏÑ±:
{
  "cutList": [
    {
      "order": 1,
      "title": "Ïª∑ Ï†úÎ™©",
      "description": "Ïª∑ ÏÑ§Î™Ö",
      "cameraSetup": {
        "shotSize": "MS",
        "angleDirection": "Eye-level",
        "cameraMovement": "Static",
        "lensSpecs": "50mm f/1.8",
        "cameraSettings": {
          "aperture": "f/2.8",
          "shutterSpeed": "1/60",
          "iso": "800"
        }
      },
      "vfxEffects": "ÌäπÏàò Ìö®Í≥º ÏóÜÏùå",
      "soundEffects": "Î∞∞Í≤ΩÏùå",
      "dialogue": "ÎåÄÏÇ¨ ÎÇ¥Ïö©",
      "narration": "ÎÇ¥Î†àÏù¥ÏÖò ÎÇ¥Ïö©",
      "subjectMovement": [
        {
          "name": "Ï£ºÏù∏Í≥µ",
          "type": "character",
          "position": "ÌôîÎ©¥ Ï§ëÏïô",
          "action": "Ï≤úÏ≤úÌûà Í±∑Í∏∞",
          "emotion": "Ï∞®Î∂ÑÌï®",
          "description": "Ï£ºÏù∏Í≥µÏù¥ Ï≤úÏ≤úÌûà Í±∑Îäî Î™®Ïäµ"
        }
      ],
      "productionMethod": "live_action",
      "productionMethodReason": "Ïã§ÏÇ¨ Ï¥¨ÏòÅÏúºÎ°ú ÏûêÏó∞Ïä§Îü¨Ïö¥ Î∂ÑÏúÑÍ∏∞ Ïó∞Ï∂ú",
      "estimatedDuration": 8,
      "specialRequirements": {
        "specialCinematography": {
          "drone": false, 
          "crane": false,
          "jib": false,
          "underwater": false,
          "aerial": false
        },
        "specialEffects": {
          "vfx": false,
          "pyrotechnics": false,
          "smoke": false,
          "fog": false,
          "wind": false,
          "rain": false,
          "snow": false,
          "fire": false,
          "explosion": false,
          "stunt": false
        },
        "specialLighting": {
          "laser": false,
          "strobe": false,
          "blackLight": false,
          "uvLight": false,
          "movingLight": false,
          "colorChanger": false
        },
        "safety": {
          "requiresMedic": false,
          "requiresFireSafety": false,
          "requiresSafetyOfficer": false
        }
      },
      "cutDelta": {
        "additionalCrew": {
          "cinematography": {
            "droneOperator": [],
            "craneOperator": [],
            "jibOperator": [],
            "underwaterOperator": [],
            "aerialOperator": []
          },
          "lighting": {
            "specialEffectsGaffer": [],
            "laserOperator": [],
            "strobeOperator": [],
            "fogOperator": []
          },
          "sound": {
            "foleyArtist": [],
            "ambienceRecordist": [],
            "specialSoundEngineer": []
          },
          "art": {
            "vfxSupervisor": [],
            "sfxSupervisor": [],
            "pyrotechnician": [],
            "stuntCoordinator": [],
            "animatronicsOperator": [],
            "prostheticsArtist": [],
            "bloodEffectsArtist": [],
            "makeupEffectsArtist": [],
            "setEffectsArtist": [],
            "specialPropsMaster": [],
            "specialCostumeDesigner": []
          },
          "production": {
            "safetySupervisor": [],
            "fireSafetyOfficer": [],
            "medic": [],
            "emergencyCoordinator": []
          },
          "etc": []
        },
        "additionalEquipment": {
          "cinematography": {
            "drones": [],
            "cranes": [],
            "jibs": [],
            "underwaterHousings": [],
            "aerialRigs": []
          },
          "lighting": {
            "specialKeyLights": [],
            "specialFillLights": [],
            "specialBackLights": [],
            "specialBackgroundLights": [],
            "specialEffectsLights": [],
            "specialSoftLights": [],
            "specialGripModifiers": {
              "flags": [],
              "diffusion": [],
              "reflectors": [],
              "colorGels": []
            },
            "specialPower": []
          },
          "sound": {
            "foleyEquipment": [],
            "ambienceRecorders": [],
            "specialMicrophones": [],
            "soundEffects": []
          },
          "art": {
            "vfxEquipment": [],
            "pyrotechnics": [],
            "smokeMachines": [],
            "fogMachines": [],
            "windMachines": [],
            "rainMachines": [],
            "snowMachines": [],
            "animatronics": [],
            "prosthetics": [],
            "bloodEffects": [],
            "makeupEffects": [],
            "setEffects": [],
            "props": {
              "characterProps": [],
              "setProps": []
            },
            "costumes": []
          },
          "production": {
            "safetyGear": [],
            "fireSuppression": [],
            "medicalEquipment": [],
            "emergencyEquipment": []
          },
          "etc": []
        }
      }
    }
  ]
}

Í∞Å Ïª∑ÏùÄ Îã§ÏùåÏùÑ Í≥†Î†§ÌïòÏó¨ ÏÉùÏÑ±:

**Ïª∑ ÎîîÏûêÏù∏ Ìå®ÌÑ¥ Î∞è Î™∞ÏûÖÍ∞ê Íµ¨ÏÑ± ÏõêÏπô:**

1. **ÏãúÌÄÄÏä§ Íµ¨Ï°∞ (Sequence Structure):**
   - **Establishing Shot (ÏÑ§Ï†ï ÏÉ∑)**: Ïû•ÏÜåÏôÄ ÏÉÅÌô©ÏùÑ Î≥¥Ïó¨Ï£ºÎäî ÏôÄÏù¥Îìú ÏÉ∑
   - **Medium Shot (Ï§ëÍ∞Ñ ÏÉ∑)**: Ï∫êÎ¶≠ÌÑ∞ÏôÄ Ïï°ÏÖòÏùÑ Î≥¥Ïó¨Ï£ºÎäî Ï§ëÍ∞Ñ Í±∞Î¶¨
   - **Close-up (ÌÅ¥Î°úÏ¶àÏóÖ)**: Í∞êÏ†ïÍ≥º ÏÑ∏Î∂ÄÏÇ¨Ìï≠ÏùÑ Í∞ïÏ°∞ÌïòÎäî Í∑ºÏ†ë ÏÉ∑
   - **Reaction Shot (Î∞òÏùë ÏÉ∑)**: Ï∫êÎ¶≠ÌÑ∞Ïùò Î∞òÏùëÏùÑ Î≥¥Ïó¨Ï£ºÎäî ÏÉ∑

2. **Î™∞ÏûÖÍ∞êÏùÑ ÏúÑÌïú ÏÉ∑ Íµ¨ÏÑ±:**
   - **POV (Point of View)**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÏãúÏ†êÏúºÎ°ú Î™∞ÏûÖÍ∞ê Ï¶ùÎåÄ
   - **OTS (Over the Shoulder)**: ÎåÄÌôî Ïãú ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏãúÏ†ê
   - **Dutch Angle**: Í∏¥Ïû•Í∞êÍ≥º Î∂àÏïàÏ†ïÌïú Î∂ÑÏúÑÍ∏∞ Ïó∞Ï∂ú
   - **Low Angle**: ÌûòÍ≥º ÏúÑÏóÑÏùÑ Í∞ïÏ°∞
   - **High Angle**: ÏïΩÏ†êÏù¥ÎÇò Î¨¥Î†•Í∞êÏùÑ ÌëúÌòÑ

3. **Ïπ¥Î©îÎùº ÏõÄÏßÅÏûÑÏúºÎ°ú Î™∞ÏûÖÍ∞ê Ï¶ùÎåÄ:**
   - **Dolly**: Î∂ÄÎìúÎü¨Ïö¥ Ï∂îÏ†ÅÏúºÎ°ú ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏõÄÏßÅÏûÑ
   - **Handheld**: ÌòÑÏã§Í∞êÍ≥º Í∏¥Ïû•Í∞ê Ïó∞Ï∂ú
   - **Steadicam**: ÏïàÏ†ïÏ†ÅÏù¥Î©¥ÏÑúÎèÑ Ïú†Ïó∞Ìïú ÏõÄÏßÅÏûÑ
   - **Drone**: Í≥µÏ§ëÏóêÏÑúÏùò ÎèÖÌäπÌïú ÏãúÏ†ê
   - **Crane**: Í∑πÏ†ÅÏù∏ ÏÉÅÏäπ/ÌïòÍ∞ï Ìö®Í≥º

4. **Í∞êÏ†ïÏ†Å Î™∞ÏûÖÏùÑ ÏúÑÌïú ÏÉ∑ ÏÇ¨Ïù¥Ï¶à:**
   - **EWS (Extreme Wide Shot)**: Ïû•ÏÜåÏùò Í∑úÎ™®ÏôÄ Î∂ÑÏúÑÍ∏∞
   - **WS (Wide Shot)**: Ï†ÑÏ≤¥ ÏÉÅÌô© ÌååÏïÖ
   - **MS (Medium Shot)**: Ï∫êÎ¶≠ÌÑ∞ÏôÄ Ïï°ÏÖòÏùò Í∑†Ìòï
   - **CU (Close Up)**: Í∞êÏ†ïÍ≥º ÏÑ∏Î∂ÄÏÇ¨Ìï≠
   - **ECU (Extreme Close Up)**: Í∑πÏ†ÅÏù∏ Í∞ïÏ°∞

5. **ÏãúÍ∞ÅÏ†Å Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ:**
   - **Rule of Thirds**: ÌôîÎ©¥ÏùÑ 3Îì±Î∂ÑÌïòÏó¨ ÏãúÍ∞ÅÏ†Å Í∑†Ìòï
   - **Leading Lines**: ÏãúÏÑ†ÏùÑ Ïú†ÎèÑÌïòÎäî ÏÑ†Ï†Å ÏöîÏÜå
   - **Depth of Field**: Ï¥àÏ†êÏúºÎ°ú Ï£ºÎ™©Ìï† ÏöîÏÜå Í∞ïÏ°∞
   - **Color Contrast**: ÏÉâÏÉÅ ÎåÄÎπÑÎ°ú Í∞êÏ†ï Í∞ïÏ°∞

6. **Î¶¨Îì¨Í≥º ÌéòÏù¥Ïä§:**
   - **Fast Cuts**: Í∏¥Ïû•Í∞êÍ≥º ÏóêÎÑàÏßÄ
   - **Slow Motion**: Í∞êÏ†ïÏ†Å ÏàúÍ∞ÑÏùò Ïó∞Ïû•
   - **Long Takes**: ÌòÑÏã§Í∞êÍ≥º Î™∞ÏûÖÍ∞ê
   - **Montage**: ÏãúÍ∞ÑÏùò ÏïïÏ∂ïÍ≥º Í∞êÏ†ïÏùò ÏßëÏ§ë

7. **ÏãúÌÄÄÏä§Î≥Ñ Ïª∑ Íµ¨ÏÑ± Ìå®ÌÑ¥:**
   - **Ïï°ÏÖò ÏãúÌÄÄÏä§**: EWS ‚Üí WS ‚Üí MS ‚Üí CU ‚Üí ECU (Í∏¥Ïû•Í∞ê Ï¶ùÍ∞Ä)
   - **ÎåÄÌôî ÏãúÌÄÄÏä§**: MS ‚Üí OTS ‚Üí CU ‚Üí Reaction Shot (Í∞êÏ†ï ÍµêÎ•ò)
   - **Í∞êÏ†ï ÏãúÌÄÄÏä§**: CU ‚Üí ECU ‚Üí POV ‚Üí Dutch Angle (ÎÇ¥Î©¥ ÌÉêÍµ¨)
   - **ÌôòÍ≤Ω ÏãúÌÄÄÏä§**: EWS ‚Üí WS ‚Üí MS ‚Üí Detail Shot (Í≥µÍ∞Ñ ÌÉêÏÉâ)
   - **ÌÅ¥ÎùºÏù¥Îß•Ïä§**: Low Angle ‚Üí Dutch Angle ‚Üí Handheld ‚Üí Fast Cuts (Í∑πÏ†Å Ìö®Í≥º)

8. **Î™∞ÏûÖÍ∞ê Ï¶ùÎåÄ Í∏∞Î≤ï:**
   - **Subjective Camera**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÏãúÏ†êÏúºÎ°ú Í¥ÄÍ∞ùÏùÑ Ïä§ÌÜ†Î¶¨Ïóê Ï∞∏Ïó¨ÏãúÌÇ¥
   - **Tracking Shot**: Ï∫êÎ¶≠ÌÑ∞ÏôÄ Ìï®Íªò ÏõÄÏßÅÏù¥Î©∞ ÌòÑÏã§Í∞ê Ï¶ùÎåÄ
   - **Depth of Field**: Ï¥àÏ†êÏùÑ ÌÜµÌï¥ Ï£ºÎ™©Ìï† ÏöîÏÜåÎ•º Î™ÖÌôïÌûà Ìï®
   - **Lighting Contrast**: Ï°∞Î™Ö ÎåÄÎπÑÎ°ú Í∞êÏ†ïÏ†Å Î∂ÑÏúÑÍ∏∞ Í∞ïÏ°∞
   - **Sound Design**: ÏùåÌñ•Í≥º ÏãúÍ∞ÅÏùò Ï°∞ÌôîÎ°ú Î™∞ÏûÖÍ∞ê Ï¶ùÎåÄ

9. **Í∞êÏ†ïÎ≥Ñ Ïª∑ Íµ¨ÏÑ± Í∞ÄÏù¥Îìú:**
   - **Í∏¥Ïû•Í∞ê**: Dutch Angle + Handheld + Fast Cuts + Low Key Lighting
   - **Î°úÎß®Ïä§**: Soft Lighting + CU + Slow Motion + Gentle Camera Movement
   - **Ïï°ÏÖò**: Wide Shots + Fast Movement + Dynamic Angles + High Energy
   - **ÎìúÎùºÎßà**: MS + CU + Static Camera + Natural Lighting
   - **Í≥µÌè¨**: Dutch Angle + ECU + Handheld + Dark Lighting
   - **Ìù¨Í∑π**: Wide Shots + Eye-level + Bright Lighting + Simple Movement

10. **ÏãúÍ∞ÅÏ†Å Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ ÏõêÏπô:**
    - **Show, Don't Tell**: ÎåÄÏÇ¨Î≥¥Îã§ ÏãúÍ∞ÅÏ†Å ÏöîÏÜåÎ°ú Ïä§ÌÜ†Î¶¨ Ï†ÑÎã¨
    - **Emotional Journey**: Í∞êÏ†ïÏùò Î≥ÄÌôîÎ•º ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌëúÌòÑ
    - **Character Arc**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÏÑ±Ïû•ÏùÑ ÏÉ∑ Íµ¨ÏÑ±ÏúºÎ°ú ÌëúÌòÑ
    - **Theme Reinforcement**: Ï£ºÏ†úÎ•º Î∞òÎ≥µÎêòÎäî ÏãúÍ∞ÅÏ†Å Î™®Ìã∞ÌîÑÎ°ú Í∞ïÏ°∞
    - **Audience Engagement**: Í¥ÄÍ∞ùÏùò Í∞êÏ†ïÏ†Å Ï∞∏Ïó¨Î•º Ïú†ÎèÑÌïòÎäî Íµ¨ÏÑ±

11. **Ïª∑ Í∞Ñ Ïó∞Í¥ÄÏÑ± Î∞è ÎåÄÎπÑ Ìö®Í≥º ÏÑ§Í≥Ñ:**
    - **Cut-in**: Í∞ôÏùÄ Ïï°ÏÖòÏùò Îã§Î•∏ Í∞ÅÎèÑÎ°ú ÏãúÏ†ê Î≥ÄÌôî (Ïòà: WS ‚Üí CU)
    - **Overlapping Action**: ÎèôÏùº ÎèôÏûëÏùÑ Ïó¨Îü¨ Í∞ÅÎèÑÏóêÏÑú Î∞òÎ≥µÌïòÏó¨ Î¶¨Îì¨Í∞ê Ï¶ùÎåÄ
    - **Matching Movement**: Ïù¥Ï†Ñ Ïª∑Ïùò ÏõÄÏßÅÏûÑÏùÑ Îã§Ïùå Ïª∑ÏóêÏÑú ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïó∞Í≤∞
    - **Rhythm Change**: Í∏¥ ÏÉ∑Í≥º ÏßßÏùÄ ÏÉ∑Ïùò ÍµêÎåÄÎ°ú Î¶¨Îì¨Í∞ê Ï∞ΩÏ∂ú
    - **Eye-line Match**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÏãúÏÑ†ÏùÑ Îî∞Îùº Îã§Ïùå Ïª∑ÏúºÎ°ú ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï†ÑÌôò
    - **Graphic Match**: ÌòïÌÉúÎÇò ÏÉâÏÉÅÏùò Ïú†ÏÇ¨ÏÑ±ÏùÑ ÌÜµÌï¥ ÏãúÍ∞ÅÏ†Å Ïó∞Í≤∞
    - **Action Match**: ÎèôÏùºÌïú Ïï°ÏÖòÏùÑ Îã§Î•∏ Í∞ÅÎèÑÏóêÏÑú Ïó∞ÏÜç Ï¥¨ÏòÅ

12. **Í∞êÏ†ï Í≥°ÏÑ†Ïóê Îî∞Î•∏ Ï†êÏßÑÏ†Å Íµ¨ÏÑ±:**
    - **Tension Build-up**: WS ‚Üí MS ‚Üí CU ‚Üí ECU (Í∏¥Ïû•Í∞ê Ï†êÏßÑÏ†Å Ï¶ùÍ∞Ä)
    - **Emotional Release**: ECU ‚Üí CU ‚Üí MS ‚Üí WS (Í∞êÏ†ï Ìï¥Î∞©)
    - **Rhythm Acceleration**: Í∏¥ ÏÉ∑ ‚Üí Ï§ëÍ∞Ñ ÏÉ∑ ‚Üí ÏßßÏùÄ ÏÉ∑ (ÏÜçÎèÑÍ∞ê Ï¶ùÍ∞Ä)
    - **Rhythm Deceleration**: ÏßßÏùÄ ÏÉ∑ ‚Üí Ï§ëÍ∞Ñ ÏÉ∑ ‚Üí Í∏¥ ÏÉ∑ (ÏÜçÎèÑÍ∞ê Í∞êÏÜå)
    - **Emotional Contrast**: Î∞ùÏùÄ ÏÉ∑ ‚Üî Ïñ¥ÎëêÏö¥ ÏÉ∑, Ï†ïÏ†Å ÏÉ∑ ‚Üî ÎèôÏ†Å ÏÉ∑

13. **ÏãúÌÄÄÏä§ Î¶¨Îì¨ ÏÑ§Í≥Ñ:**
    - **Establishing Rhythm**: Ï≤´ Ïª∑ÏúºÎ°ú Ï†ÑÏ≤¥ Î∂ÑÏúÑÍ∏∞ ÏÑ§Ï†ï
    - **Development Rhythm**: Ï§ëÍ∞Ñ Ïª∑Îì§Î°ú Ïä§ÌÜ†Î¶¨ Î∞úÏ†Ñ
    - **Climax Rhythm**: ÌÅ¥ÎùºÏù¥Îß•Ïä§ÏóêÏÑú Î¶¨Îì¨ ÏµúÍ≥†Ï°∞
    - **Resolution Rhythm**: ÎßàÎ¨¥Î¶¨ÏóêÏÑú Î¶¨Îì¨ ÏïàÏ†ïÌôî
    - **Pause and Breath**: Í∏¥Ïû• ÌõÑ Ïù¥ÏôÑÏúºÎ°ú Í∞êÏ†ïÏ†Å Ìò∏Ìù°

14. **Ïª∑ Ï†ÑÌôò Í∏∞Î≤ï:**
    - **Cut on Action**: Ïï°ÏÖò Ï§ëÍ∞ÑÏóê Ïª∑ÌïòÏó¨ ÏûêÏó∞Ïä§Îü¨Ïö¥ Ï†ÑÌôò
    - **Cut on Reaction**: Î∞òÏùëÏùÑ ÌÜµÌï¥ Í∞êÏ†ïÏ†Å Ï†ÑÌôò
    - **Cut on Movement**: ÏõÄÏßÅÏûÑÏùÑ ÌÜµÌï¥ ÏãúÍ∞ÅÏ†Å Ïó∞Í≤∞
    - **Cut on Sound**: ÏÜåÎ¶¨Î•º ÌÜµÌï¥ Ï≤≠Í∞ÅÏ†Å Ïó∞Í≤∞
    - **Cut on Emotion**: Í∞êÏ†ï Î≥ÄÌôîÎ•º ÌÜµÌï¥ ÎÇ¥Ï†Å Ïó∞Í≤∞

15. **ÏãúÍ∞ÅÏ†Å ÎåÄÎπÑ Ìö®Í≥º:**
    - **Size Contrast**: WS ‚Üî CU (Í∑úÎ™® ÎåÄÎπÑ)
    - **Angle Contrast**: High Angle ‚Üî Low Angle (ÏãúÏ†ê ÎåÄÎπÑ)
    - **Movement Contrast**: Static ‚Üî Dynamic (ÏõÄÏßÅÏûÑ ÎåÄÎπÑ)
    - **Lighting Contrast**: Bright ‚Üî Dark (Ï°∞Î™Ö ÎåÄÎπÑ)
    - **Color Contrast**: Warm ‚Üî Cool (ÏÉâÍ∞ê ÎåÄÎπÑ)

16. **ÏãúÌÄÄÏä§ ÎÇ¥ Ïª∑ Í∞Ñ Ïó∞Í¥ÄÏÑ± Í∞ïÌôî:**
    - **Continuity of Action**: Ïù¥Ï†Ñ Ïª∑Ïùò Ïï°ÏÖòÏù¥ Îã§Ïùå Ïª∑ÏóêÏÑú ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥Ïßê
    - **Continuity of Direction**: Ï∫êÎ¶≠ÌÑ∞ÎÇò Î¨ºÏ≤¥Ïùò ÏõÄÏßÅÏûÑ Î∞©Ìñ•Ïù¥ ÏùºÍ¥ÄÎê®
    - **Continuity of Position**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÏúÑÏπòÍ∞Ä ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Ïó∞Í≤∞Îê®
    - **Continuity of Time**: ÏãúÍ∞ÑÏ†Å ÌùêÎ¶ÑÏù¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïó∞Í≤∞Îê®
    - **Continuity of Space**: Í≥µÍ∞ÑÏ†Å Í¥ÄÍ≥ÑÍ∞Ä ÏùºÍ¥ÄÎêòÍ≤å Ïú†ÏßÄÎê®

17. **Í∞êÏ†ïÏ†Å Î™∞ÏûÖÏùÑ ÏúÑÌïú Ïª∑ ÏÑ§Í≥Ñ:**
    - **Emotional Pacing**: Í∞êÏ†ïÏùò Í∞ïÎèÑÏóê Îî∞Îùº Ïª∑ Í∏∏Ïù¥ Ï°∞Ï†à
    - **Suspense Building**: Í∏¥Ïû•Í∞êÏùÑ ÏúÑÌïú Ï†êÏßÑÏ†Å ÌÅ¥Î°úÏ¶àÏóÖ
    - **Catharsis**: Í∞êÏ†ï Ìï¥Î∞©ÏùÑ ÏúÑÌïú ÏãúÍ∞ÅÏ†Å Ìè≠Î∞ú
    - **Intimacy**: Í∞êÏ†ïÏ†Å ÏπúÎ∞ÄÍ∞êÏùÑ ÏúÑÌïú ÌÅ¥Î°úÏ¶àÏóÖ
    - **Distance**: Í∞ùÍ¥ÄÏ†Å Í±∞Î¶¨Í∞êÏùÑ ÏúÑÌïú ÏôÄÏù¥Îìú ÏÉ∑

18. **Î¶¨Îì¨Í∞ê ÏûàÎäî ÏãúÌÄÄÏä§ Íµ¨ÏÑ±:**
    - **Staccato Rhythm**: ÏßßÍ≥† Îπ†Î•∏ Ïª∑ÏúºÎ°ú ÏóêÎÑàÏßÄ Ï¶ùÎåÄ
    - **Legato Rhythm**: Í∏∏Í≥† Î∂ÄÎìúÎü¨Ïö¥ Ïª∑ÏúºÎ°ú Í∞êÏ†ï Ïó∞Ïû•
    - **Syncopated Rhythm**: ÏòàÏÉÅÍ≥º Îã§Î•∏ ÌÉÄÏù¥Î∞çÏúºÎ°ú ÎÜÄÎùºÏõÄ
    - **Crescendo Rhythm**: Ï†êÏßÑÏ†ÅÏúºÎ°ú Í∞ïÌï¥ÏßÄÎäî Î¶¨Îì¨
    - **Decrescendo Rhythm**: Ï†êÏßÑÏ†ÅÏúºÎ°ú ÏïΩÌï¥ÏßÄÎäî Î¶¨Îì¨

19. **ÏãúÍ∞ÅÏ†Å Î™®Ìã∞ÌîÑ Î∞òÎ≥µ:**
    - **Recurring Shot**: ÌäπÏ†ï ÏÉ∑ÏùÑ Î∞òÎ≥µÌïòÏó¨ Ï£ºÏ†ú Í∞ïÏ°∞
    - **Visual Echo**: Ïù¥Ï†Ñ Ïª∑Ïùò ÏãúÍ∞ÅÏ†Å ÏöîÏÜåÎ•º Îã§Ïùå Ïª∑ÏóêÏÑú Ïû¨Ìï¥ÏÑù
    - **Color Motif**: ÌäπÏ†ï ÏÉâÏÉÅÏùÑ Î∞òÎ≥µÌïòÏó¨ Í∞êÏ†ï Í∞ïÏ°∞
    - **Shape Motif**: ÌäπÏ†ï ÌòïÌÉúÎ•º Î∞òÎ≥µÌïòÏó¨ ÏãúÍ∞ÅÏ†Å ÌÜµÏùºÍ∞ê
    - **Movement Motif**: ÌäπÏ†ï ÏõÄÏßÅÏûÑÏùÑ Î∞òÎ≥µÌïòÏó¨ Î¶¨Îì¨Í∞ê Ï∞ΩÏ∂ú

20. **Ïª∑ ÏãúÌÄÄÏä§ ÏÑ§Í≥Ñ ÏõêÏπô:**
    - **Unity**: Ï†ÑÏ≤¥ ÏãúÌÄÄÏä§Í∞Ä ÌïòÎÇòÏùò Í∞êÏ†ïÏ†Å Î™©ÌëúÎ•º Ìñ•Ìï®
    - **Variety**: Îã®Ï°∞Î°úÏõÄÏùÑ ÌîºÌïòÍ∏∞ ÏúÑÌïú Îã§ÏñëÌïú Íµ¨ÏÑ±
    - **Balance**: Í∏¥Ïû•Í≥º Ïù¥ÏôÑÏùò Í∑†Ìòï
    - **Progression**: Í∞êÏ†ïÏ†Å Ïó¨Ï†ïÏùò ÏûêÏó∞Ïä§Îü¨Ïö¥ Î∞úÏ†Ñ
    - **Closure**: ÏãúÌÄÄÏä§Ïùò ÎßåÏ°±Ïä§Îü¨Ïö¥ ÎßàÎ¨¥Î¶¨

21. **Ï∞ΩÏùòÏ†Å Ïã§ÌóòÏ†Å Ïª∑ ÎîîÏûêÏù∏ (Ï†ÑÏ≤¥Ïùò 10%):**
    - **Jump Cut**: ÏãúÍ∞ÑÏùò Í∏âÍ≤©Ìïú ÏïïÏ∂ïÏúºÎ°ú ÎÜÄÎùºÏõÄ Ïó∞Ï∂ú
    - **Match Cut**: ÌòïÌÉúÎÇò ÏõÄÏßÅÏûÑÏùò Ïú†ÏÇ¨ÏÑ±ÏúºÎ°ú ÏãúÍ∞ÅÏ†Å Ïó∞Í≤∞
    - **Graphic Match**: ÏÉâÏÉÅ, ÌòïÌÉú, Íµ¨ÎèÑÏùò Ïú†ÏÇ¨ÏÑ±ÏúºÎ°ú Ï†ÑÌôò
    - **Split Screen**: ÎèôÏãúÏÑ±Ïù¥ÎÇò ÎåÄÎπÑÎ•º ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌëúÌòÑ
    - **Object POV**: Î¨ºÏ≤¥Ïùò ÏãúÏ†êÏúºÎ°ú ÎèÖÌäπÌïú Í¥ÄÏ†ê Ï†úÍ≥µ
    - **Silhouette Composition**: Ïã§Î£®Ïó£ÏúºÎ°ú ÎØ∏Ïä§ÌÑ∞Î¶¨Ìïú Î∂ÑÏúÑÍ∏∞ Ïó∞Ï∂ú
    - **Whip Pan**: Îπ†Î•∏ Ìå¨ÏúºÎ°ú ÏóêÎÑàÏßÄÏôÄ Í∏¥Ïû•Í∞ê Ï¶ùÎåÄ
    - **360ÎèÑ ÌöåÏ†Ñ**: Ï∫êÎ¶≠ÌÑ∞ÎÇò Í≥µÍ∞ÑÏùò ÏôÑÏ†ÑÌïú ÌÉêÏÉâ
    - **Dutch Tilt**: Î∂àÏïàÏ†ïÌïú Í∞ÅÎèÑÎ°ú Í∏¥Ïû•Í∞ê Ïó∞Ï∂ú
    - **Extreme Close-up**: Í∑πÎã®Ï†Å ÌÅ¥Î°úÏ¶àÏóÖÏúºÎ°ú Í∞ïÎ†¨Ìïú Ïù∏ÏÉÅ
    - **Slow Motion**: ÏãúÍ∞ÑÏùò Ïó∞Ïû•ÏúºÎ°ú Í∞êÏ†ïÏ†Å ÏàúÍ∞Ñ Í∞ïÏ°∞
    - **Fast Motion**: ÏãúÍ∞ÑÏùò ÏïïÏ∂ïÏúºÎ°ú ÏóêÎÑàÏßÄ Ï¶ùÎåÄ

22. **Ïã§ÌóòÏ†Å Ïª∑Ïùò Ï†ÅÏ†àÌïú Î∞∞Ïπò:**
    - **Climax Point**: Í∞êÏ†ïÏùò Ï†àÏ†ïÏóêÏÑú Í∞ïÎ†¨Ìïú ÏãúÍ∞ÅÏ†Å Ï∂©Í≤©
    - **Transition Point**: Ïû•Î©¥ Ï†ÑÌôòÏóêÏÑú ÎèÖÌäπÌïú Ïó∞Í≤∞
    - **Emotional Peak**: Í∞êÏ†ïÏùò ÏµúÍ≥†Ï†êÏóêÏÑú Ïã§ÌóòÏ†Å ÌëúÌòÑ
    - **Narrative Twist**: Ïù¥ÏïºÍ∏∞ Ï†ÑÌôòÏ†êÏóêÏÑú ÎÜÄÎùºÏö¥ ÏãúÍ∞Å
    - **Character Revelation**: Ï∫êÎ¶≠ÌÑ∞Ïùò Ï§ëÏöîÌïú ÏàúÍ∞ÑÏóêÏÑú ÌäπÎ≥ÑÌïú Í∞ÅÎèÑ

23. **Ïã§ÌóòÏ†Å Ïª∑Ïùò ÏÑúÏÇ¨ ÌÜµÌï©:**
    - **Narrative Justification**: Ïã§ÌóòÏ†Å Ïª∑Ïù¥ Ïä§ÌÜ†Î¶¨Ïóê ÏùòÎØ∏Î•º ÎçîÌï®
    - **Emotional Enhancement**: Í∞êÏ†ïÏ†Å Ï∂©Í≤©ÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Ï¶ùÌè≠
    - **Character Insight**: Ï∫êÎ¶≠ÌÑ∞Ïùò ÎÇ¥Î©¥ÏùÑ ÎèÖÌäπÌïú Î∞©ÏãùÏúºÎ°ú ÌëúÌòÑ
    - **Thematic Reinforcement**: Ï£ºÏ†úÎ•º Ïã§ÌóòÏ†Å Í∏∞Î≤ïÏúºÎ°ú Í∞ïÏ°∞
    - **Audience Engagement**: Í¥ÄÍ∞ùÏùò Ï£ºÏùòÎ•º ÎÅåÎ©¥ÏÑú Î™∞ÏûÖ Ïú†ÏßÄ

24. **Ïã§ÌóòÏ†Å Ïª∑Ïùò Í∏∞Ïà†Ï†Å Í≥†Î†§ÏÇ¨Ìï≠:**
    - **Technical Feasibility**: Ïã§Ï†ú Ï¥¨ÏòÅ Í∞ÄÎä•Ìïú Í∏∞Î≤ï ÏÑ†ÌÉù
    - **Post-production Integration**: Ìé∏Ïßë ÌõÑ ÏûëÏóÖÍ≥ºÏùò Ï°∞Ìôî
    - **Audience Comprehension**: Í¥ÄÍ∞ùÏù¥ Ïù¥Ìï¥Ìï† Ïàò ÏûàÎäî ÏàòÏ§Ä Ïú†ÏßÄ
    - **Genre Appropriateness**: Ïû•Î•¥Ïóê ÎßûÎäî Ïã§ÌóòÏ†Å Í∏∞Î≤ï ÏÑ†ÌÉù
    - **Budget Consideration**: Ï†úÏûë ÎπÑÏö©ÏùÑ Í≥†Î†§Ìïú Í∏∞Î≤ï ÏÑ†ÌÉù

25. **Ï∞ΩÏùòÏ†Å Ïª∑Ïùò Í∞êÏ†ïÏ†Å Ìö®Í≥º:**
    - **Surprise Factor**: ÏòàÏÉÅÏπò Î™ªÌïú ÏãúÍ∞ÅÏ†Å Ï∂©Í≤©
    - **Memory Anchor**: Í∞ïÎ†¨Ìïú Ïù∏ÏÉÅÏúºÎ°ú Í∏∞ÏñµÏóê ÎÇ®Îäî ÏàúÍ∞Ñ
    - **Emotional Amplification**: Í∞êÏ†ïÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Ï¶ùÌè≠
    - **Narrative Emphasis**: Ï§ëÏöîÌïú ÏàúÍ∞ÑÏùÑ ÌäπÎ≥ÑÌïòÍ≤å Í∞ïÏ°∞
    - **Visual Poetry**: ÏãúÍ∞ÅÏ†Å ÏãúÎ°ú ÌëúÌòÑÌïòÎäî Í∞êÏ†ï

26. **Ïã§ÌóòÏ†Å Ïª∑Ïùò Íµ¨Ï≤¥Ï†Å Ï†ÅÏö© ÏòàÏãú:**
    - **Jump Cut**: "Î¨∏ÏùÑ Ïó¥Í≥† ‚Üí Î∞îÎ°ú Î∞© Ïïà" (ÏãúÍ∞Ñ ÏïïÏ∂ï)
    - **Match Cut**: "Îã¨Î¶¨Îäî Î∞ú ‚Üí Îã¨Î¶¨Îäî Î∞îÌÄ¥" (ÏõÄÏßÅÏûÑ Ïó∞Í≤∞)
    - **Graphic Match**: "ÏõêÌòï Ï∞ΩÎ¨∏ ‚Üí ÏõêÌòï ÌÉúÏñë" (ÌòïÌÉú Ïó∞Í≤∞)
    - **Split Screen**: "ÎèôÏãúÏóê Îã§Î•∏ Ïû•ÏÜåÏùò Îëê Ï∫êÎ¶≠ÌÑ∞" (ÎèôÏãúÏÑ±)
    - **Object POV**: "Ïπ¥Î©îÎùºÍ∞Ä Î¨ºÏ≤¥Ïùò ÏãúÏ†êÏúºÎ°ú Ï¥¨ÏòÅ" (ÎèÖÌäπÌïú Í¥ÄÏ†ê)
    - **Silhouette**: "Ïã§Î£®Ïó£ÏúºÎ°úÎßå Î≥¥Ïù¥Îäî Ï∫êÎ¶≠ÌÑ∞" (ÎØ∏Ïä§ÌÑ∞Î¶¨)
    - **Whip Pan**: "Îπ†Î•∏ Ìå¨ÏúºÎ°ú Í∏¥Ïû•Í∞ê Ï¶ùÎåÄ" (ÏóêÎÑàÏßÄ)
    - **360ÎèÑ ÌöåÏ†Ñ**: "Ï∫êÎ¶≠ÌÑ∞ Ï£ºÎ≥ÄÏùÑ ÏôÑÏ†ÑÌûà ÌÉêÏÉâ" (Í≥µÍ∞Ñ ÌÉêÏÉâ)

27. **Ïã§ÌóòÏ†Å Ïª∑Ïùò Î∞∞Ïπò Ï†ÑÎûµ:**
    - **85% Î™∞ÏûÖÍ∞ê ÏûàÎäî Ïª∑**: ÏÑúÏÇ¨ ÌùêÎ¶ÑÍ≥º Í∞êÏ†ï Í≥°ÏÑ†Ïóê Ï∂©Ïã§
    - **15% Ïã§ÌóòÏ†Å Ïª∑**: ÌÅ¥ÎùºÏù¥Îß•Ïä§ÎÇò Ï†ÑÌôòÏ†êÏóêÏÑú Í∞ïÎ†¨Ìïú Ïù∏ÏÉÅ
    - **Í∑†Ìòï Ïú†ÏßÄ**: Ïã§ÌóòÏ†Å Ïª∑Ïù¥ ÏÑúÏÇ¨Î•º Î∞©Ìï¥ÌïòÏßÄ ÏïäÎèÑÎ°ù Ï£ºÏùò
    - **Í∞êÏ†ïÏ†Å Ï†ïÎãπÏÑ±**: Ïã§ÌóòÏ†Å Ïª∑Ïù¥ Í∞êÏ†ïÏùÑ Ï¶ùÌè≠ÏãúÏºúÏïº Ìï®
    - **Í∏∞ÏñµÏóê ÎÇ®Îäî ÏàúÍ∞Ñ**: Í¥ÄÍ∞ùÏù¥ Ïò§Îûò Í∏∞ÏñµÌï† Ïàò ÏûàÎäî Í∞ïÎ†¨Ìïú ÏãúÍ∞Å

28. **Ïã§ÌóòÏ†Å Ïª∑Ïùò ÌíàÏßà Í∏∞Ï§Ä:**
    - **Narrative Relevance**: Ïä§ÌÜ†Î¶¨Ïóê ÏùòÎØ∏Î•º ÎçîÌïòÎäî Ïã§ÌóòÏ†Å Ïª∑
    - **Emotional Impact**: Í∞êÏ†ïÏ†Å Ï∂©Í≤©ÏùÑ Ï£ºÎäî Ïã§ÌóòÏ†Å Ïª∑
    - **Visual Innovation**: ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌòÅÏã†Ï†ÅÏù∏ Ïã§ÌóòÏ†Å Ïª∑
    - **Technical Excellence**: Í∏∞Ïà†Ï†ÅÏúºÎ°ú ÏôÑÏÑ±ÎèÑ ÎÜíÏùÄ Ïã§ÌóòÏ†Å Ïª∑
    - **Audience Engagement**: Í¥ÄÍ∞ùÏùò Î™∞ÏûÖÏùÑ Ïú†ÏßÄÌïòÎäî Ïã§ÌóòÏ†Å Ïª∑

**Í∏∞Ïà†Ï†Å ÏÑ†ÌÉù Í∞ÄÏù¥Îìú:**
- shotSize: EWS, VWS, WS, FS, LS, MLS, MS, MCS, CU, MCU, BCU, ECU, TCU, OTS, POV, TS, GS, AS, PS, BS Ï§ë ÏÑ†ÌÉù
- angleDirection: Eye-level, High, Low, Dutch, Bird_eye, Worm_eye, Canted, Oblique, Aerial, Ground, Overhead, Under, Side, Front, Back, Three_quarter, Profile, Reverse, POV, Subjective Ï§ë ÏÑ†ÌÉù  
- cameraMovement: Static, Pan, Tilt, Dolly, Zoom, Handheld, Tracking, Crane, Steadicam, Gimbal, Drone, Jib, Slider, Dolly_zoom, Arc, Circle, Spiral, Vertigo, Whip_pan, Crash_zoom, Push_in, Pull_out, Follow, Lead, Reveal, Conceal, Parallax, Time_lapse, Slow_motion, Fast_motion, Bullet_time, Matrix_style, 360_degree, VR_style Ï§ë ÏÑ†ÌÉù
- estimatedDuration: 1-30Ï¥à ÏÇ¨Ïù¥Ïùò Í∞í
- productionMethod: live_action ÎòêÎäî ai_generated Ï§ë ÏÑ†ÌÉù

ÌäπÎ≥Ñ ÏöîÍµ¨ÏÇ¨Ìï≠(specialRequirements)Í≥º Ï∂îÍ∞Ä Ïù∏Î†•/Ïû•ÎπÑ(cutDelta) Ïó∞Í¥Ä Í¥ÄÍ≥Ñ:
1. specialCinematographyÍ∞Ä trueÏù∏ Í≤ΩÏö∞:
   - drone: true ‚Üí cutDelta.additionalCrew.cinematography.droneOperatorÏóê "ÎìúÎ°† Ï°∞ÏûëÏûê" Ï∂îÍ∞Ä
   - crane: true ‚Üí cutDelta.additionalCrew.cinematography.craneOperatorÏóê "ÌÅ¨Î†àÏù∏ Ï°∞ÏûëÏûê" Ï∂îÍ∞Ä
   - jib: true ‚Üí cutDelta.additionalCrew.cinematography.jibOperatorÏóê "Ïßë Ï°∞ÏûëÏûê" Ï∂îÍ∞Ä
   - underwater: true ‚Üí cutDelta.additionalCrew.cinematography.underwaterOperatorÏóê "ÏàòÏ§ë Ï¥¨ÏòÅÏûê" Ï∂îÍ∞Ä
   - aerial: true ‚Üí cutDelta.additionalCrew.cinematography.aerialOperatorÏóê "Í≥µÏ§ë Ï¥¨ÏòÅÏûê" Ï∂îÍ∞Ä

2. specialEffectsÍ∞Ä trueÏù∏ Í≤ΩÏö∞:
   - vfx: true ‚Üí cutDelta.additionalCrew.art.vfxSupervisorÏóê "VFX Í∞êÎèÖ" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.vfxEquipmentÏóê "VFX Ïû•ÎπÑ" Ï∂îÍ∞Ä
   - pyrotechnics: true ‚Üí cutDelta.additionalCrew.art.pyrotechnicianÏóê "Ìè≠Î∞ú Ìö®Í≥º Í∏∞Ïà†Ïûê" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.pyrotechnicsÏóê "Ìè≠Î∞ú Ìö®Í≥º Ïû•ÎπÑ" Ï∂îÍ∞Ä
   - smoke: true ‚Üí cutDelta.additionalEquipment.art.smokeMachinesÏóê "Ïó∞Í∏∞ Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - fog: true ‚Üí cutDelta.additionalCrew.lighting.fogOperatorÏóê "ÏïàÍ∞ú Ìö®Í≥º Ïò§ÌçºÎ†àÏù¥ÌÑ∞" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.fogMachinesÏóê "ÏïàÍ∞ú Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - wind: true ‚Üí cutDelta.additionalEquipment.art.windMachinesÏóê "Î∞îÎûå Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - rain: true ‚Üí cutDelta.additionalEquipment.art.rainMachinesÏóê "ÎπÑ Ìö®Í≥º Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - snow: true ‚Üí cutDelta.additionalEquipment.art.snowMachinesÏóê "Îàà Ìö®Í≥º Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - fire: true ‚Üí cutDelta.additionalEquipment.art.fireMachinesÏóê "ÌôîÏû¨ Ìö®Í≥º Í∏∞Í≥Ñ" Ï∂îÍ∞Ä
   - explosion: true ‚Üí cutDelta.additionalCrew.art.pyrotechnicianÏóê "Ìè≠Î∞ú Ìö®Í≥º Í∏∞Ïà†Ïûê" Ï∂îÍ∞Ä
   - stunt: true ‚Üí cutDelta.additionalCrew.art.stuntCoordinatorÏóê "Ïä§ÌÑ¥Ìä∏ ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞" Ï∂îÍ∞Ä

3. specialLightingÏù¥ trueÏù∏ Í≤ΩÏö∞:
   - laser: true ‚Üí cutDelta.additionalCrew.lighting.laserOperatorÏóê "Î†àÏù¥Ï†Ä Ïò§ÌçºÎ†àÏù¥ÌÑ∞" Ï∂îÍ∞Ä
   - strobe: true ‚Üí cutDelta.additionalCrew.lighting.strobeOperatorÏóê "Ïä§Ìä∏Î°úÎ∏å Ïò§ÌçºÎ†àÏù¥ÌÑ∞" Ï∂îÍ∞Ä
   - blackLight: true ‚Üí cutDelta.additionalEquipment.lighting.specialEffectsLightsÏóê "Î∏îÎûôÎùºÏù¥Ìä∏" Ï∂îÍ∞Ä
   - uvLight: true ‚Üí cutDelta.additionalEquipment.lighting.specialEffectsLightsÏóê "UVÎùºÏù¥Ìä∏" Ï∂îÍ∞Ä
   - movingLight: true ‚Üí cutDelta.additionalEquipment.lighting.specialEffectsLightsÏóê "Î¨¥ÎπôÎùºÏù¥Ìä∏" Ï∂îÍ∞Ä
   - colorChanger: true ‚Üí cutDelta.additionalEquipment.lighting.specialEffectsLightsÏóê "Ïª¨Îü¨Ï≤¥Ïù∏Ï†Ä" Ï∂îÍ∞Ä

4. safetyÍ∞Ä trueÏù∏ Í≤ΩÏö∞:
   - requiresMedic: true ‚Üí cutDelta.additionalCrew.production.medicÏóê "ÏùòÎ£å Îã¥ÎãπÏûê" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.production.medicalEquipmentÏóê "ÏùòÎ£å Ïû•ÎπÑ" Ï∂îÍ∞Ä
   - requiresFireSafety: true ‚Üí cutDelta.additionalCrew.production.fireSafetyOfficerÏóê "ÏÜåÌôî ÏïàÏ†Ñ Îã¥ÎãπÏûê" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.production.fireSuppressionÏóê "ÏÜåÌôî Ïû•ÎπÑ" Ï∂îÍ∞Ä
   - requiresSafetyOfficer: true ‚Üí cutDelta.additionalCrew.production.safetySupervisorÏóê "ÏïàÏ†Ñ Í∞êÎèÖ" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.production.safetyGearÏóê "ÏïàÏ†Ñ Ïû•ÎπÑ" Ï∂îÍ∞Ä

5. Í∏∞ÌÉÄ ÌäπÏàò Ìö®Í≥º:
   - animatronics: true ‚Üí cutDelta.additionalCrew.art.animatronicsOperatorÏóê "Ïï†ÎãàÎß§Ìä∏Î°úÎãâÏä§ Ï°∞ÏûëÏûê" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.animatronicsÏóê "Ïï†ÎãàÎß§Ìä∏Î°úÎãâÏä§" Ï∂îÍ∞Ä
   - prosthetics: true ‚Üí cutDelta.additionalCrew.art.prostheticsArtistÏóê "ÌäπÏàò ÏùòÏÉÅ ÏïÑÌã∞Ïä§Ìä∏" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.prostheticsÏóê "ÌäπÏàò ÏùòÏÉÅ" Ï∂îÍ∞Ä
   - bloodEffects: true ‚Üí cutDelta.additionalCrew.art.bloodEffectsArtistÏóê "ÌòàÏï° Ìö®Í≥º ÏïÑÌã∞Ïä§Ìä∏" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.bloodEffectsÏóê "ÌòàÏï° Ìö®Í≥º" Ï∂îÍ∞Ä
   - makeupEffects: true ‚Üí cutDelta.additionalCrew.art.makeupEffectsArtistÏóê "ÌäπÏàò Î∂ÑÏû• ÏïÑÌã∞Ïä§Ìä∏" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.makeupEffectsÏóê "Î∂ÑÏû• Ìö®Í≥º" Ï∂îÍ∞Ä
   - setEffects: true ‚Üí cutDelta.additionalCrew.art.setEffectsArtistÏóê "ÏÑ∏Ìä∏ Ìö®Í≥º ÏïÑÌã∞Ïä§Ìä∏" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.art.setEffectsÏóê "ÏÑ∏Ìä∏ Ìö®Í≥º" Ï∂îÍ∞Ä

6. ÏùåÌñ• Í¥ÄÎ†®:
   - foleyArtist: true ‚Üí cutDelta.additionalCrew.sound.foleyArtistÏóê "Ìè¥Î¶¨ ÏïÑÌã∞Ïä§Ìä∏" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.sound.foleyEquipmentÏóê "Ìè¥Î¶¨ Ïû•ÎπÑ" Ï∂îÍ∞Ä
   - ambienceRecordist: true ‚Üí cutDelta.additionalCrew.sound.ambienceRecordistÏóê "ÌôòÍ≤ΩÏùå ÎÖπÏùåÏÇ¨" Ï∂îÍ∞Ä, cutDelta.additionalEquipment.sound.ambienceRecordersÏóê "ÌôòÍ≤ΩÏùå ÎÖπÏùåÍ∏∞" Ï∂îÍ∞Ä

Ïú†Ìö®Ìïú JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî.
`;
  }

  async findByProjectId(projectId: string): Promise<CutResponseDto[]> {
    if (!Types.ObjectId.isValid(projectId)) {
      throw new BadRequestException('Invalid project ID');
    }

    const cuts = await this.cutModel.find({
      projectId: new Types.ObjectId(projectId),
      isDeleted: false
    })
    .sort({ order: 1 })
    .exec();

    return cuts.map(this.mapToResponseDto);
  }

  async findBySceneId(projectId: string, sceneId: string): Promise<CutResponseDto[]> {
    if (!Types.ObjectId.isValid(sceneId) || !Types.ObjectId.isValid(projectId)) {
      throw new BadRequestException('Invalid scene ID or project ID');
    }

    const cuts = await this.cutModel.find({
      sceneId: new Types.ObjectId(sceneId),
      projectId: new Types.ObjectId(projectId),
      isDeleted: false
    })
    .sort({ order: 1 })
    .exec();

    return cuts.map(this.mapToResponseDto);
  }

  async findById(projectId: string, sceneId: string, cutId: string): Promise<CutResponseDto> {
    if (!Types.ObjectId.isValid(cutId) || !Types.ObjectId.isValid(projectId) || !Types.ObjectId.isValid(sceneId)) {
      throw new BadRequestException('Invalid cut ID or project ID or scene ID');
    }

    const cut = await this.cutModel.findOne({
      _id: new Types.ObjectId(cutId),
      projectId: new Types.ObjectId(projectId),
      sceneId: new Types.ObjectId(sceneId),
      isDeleted: false
    }).exec();

    if (!cut) {
      throw new NotFoundException('Cut not found');
    }

    return this.mapToResponseDto(cut);
  }

  async update(projectId: string, sceneId: string, cutId: string, updateCutDto: UpdateCutRequestDto): Promise<CutResponseDto> {
    if (!Types.ObjectId.isValid(cutId) || !Types.ObjectId.isValid(projectId) || !Types.ObjectId.isValid(sceneId)) {
      throw new BadRequestException('Invalid cut ID or project ID or scene ID');
    }

    const cut = await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        projectId: new Types.ObjectId(projectId),
        sceneId: new Types.ObjectId(sceneId),
        isDeleted: false
      },
      {
        ...updateCutDto,
      },
      { new: true }
    ).exec();

    if (!cut) {
      throw new NotFoundException('Cut not found');
    }

    return this.mapToResponseDto(cut);
  }

  async delete(projectId: string, sceneId: string, cutId: string): Promise<CutResponseDto> {
    if (!Types.ObjectId.isValid(cutId) || !Types.ObjectId.isValid(projectId) || !Types.ObjectId.isValid(sceneId)) {
      throw new BadRequestException('Invalid cut ID or project ID or scene ID');
    }

    const cut = await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        sceneId: new Types.ObjectId(sceneId),
        projectId: new Types.ObjectId(projectId),
        isDeleted: false
      },
      {
        isDeleted: true,
      },
      { new: true }
    ).exec();

    if (!cut) {
      throw new NotFoundException('Cut not found');
    }

    return this.mapToResponseDto(cut);
  }

  async restore(projectId: string, sceneId: string, cutId: string): Promise<CutResponseDto> {
    if (!Types.ObjectId.isValid(cutId) || !Types.ObjectId.isValid(projectId) || !Types.ObjectId.isValid(sceneId)) {
      throw new BadRequestException('Invalid cut ID or project ID or scene ID');
    }

    const cut = await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        sceneId: new Types.ObjectId(sceneId),
        projectId: new Types.ObjectId(projectId),
        isDeleted: true
      },
      {
        isDeleted: false,
      },
      { new: true }
    ).exec();

    if (!cut) {
      throw new NotFoundException('Deleted cut not found');
    }

    return this.mapToResponseDto(cut);
  }

  async updateOrder(projectId: string, sceneId: string, cutId: string, newOrder: number): Promise<CutResponseDto> {
    if (!Types.ObjectId.isValid(cutId) || !Types.ObjectId.isValid(projectId) || !Types.ObjectId.isValid(sceneId)) {
      throw new BadRequestException('Invalid cut ID or project ID or scene ID');
    }

    const cut = await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        sceneId: new Types.ObjectId(sceneId),
        projectId: new Types.ObjectId(projectId),
        isDeleted: false
      },
      {
        order: newOrder,
      },
      { new: true }
    ).exec();

    if (!cut) {
      throw new NotFoundException('Cut not found');
    }

    return this.mapToResponseDto(cut);
  }

  async getImage(projectId: string, sceneId: string, cutId: string): Promise<string> {
    const cut = await this.findById(projectId, sceneId, cutId);
    return cut.imageUrl || '';
  }

  async uploadImage(
    projectId: string, 
    sceneId: string, 
    cutId: string, 
    file: Express.Multer.File
  ): Promise<string> {
    // Ïª∑ Ï°¥Ïû¨ ÌôïÏù∏
    const cut = await this.findById(projectId, sceneId, cutId);
    
    // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎã§Î©¥ ÏÇ≠Ï†ú
    if (cut.imageUrl) {
      try {
        await this.storageFactoryService.deleteImage(cut.imageUrl);
      } catch (error) {
        console.warn('Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      }
    }

    // ÌååÏùºÏùÑ base64Î°ú Î≥ÄÌôò
    const base64Data = file.buffer.toString('base64');
    const mimeType = file.mimetype;
    const imageData = `data:${mimeType};base64,${base64Data}`;

    // ÏÉà Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
    const fileName = `cut_${cutId}_${Date.now()}_${file.originalname}`;
    const imageUrl = await this.storageFactoryService.uploadImage(
      imageData,
      fileName
    );

    // Ïª∑ ÏóÖÎç∞Ïù¥Ìä∏
    await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        projectId: new Types.ObjectId(projectId),
        sceneId: new Types.ObjectId(sceneId),
        isDeleted: false
      },
      {
        imageUrl: imageUrl
      }
    );

    return imageUrl;
  }

  async deleteImage(projectId: string, sceneId: string, cutId: string): Promise<string> {
    const cut = await this.findById(projectId, sceneId, cutId);
    
    if (cut.imageUrl) {
      try {
        await this.storageFactoryService.deleteImage(cut.imageUrl);
      } catch (error) {
        console.warn('Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      }
    }

    // Ïª∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ URL Ï†úÍ±∞
    await this.cutModel.findOneAndUpdate(
      {
        _id: new Types.ObjectId(cutId),
        projectId: new Types.ObjectId(projectId),
        sceneId: new Types.ObjectId(sceneId),
        isDeleted: false
      },
      {
        imageUrl: ''
      }
    );

    return 'Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.';
  }

  async generateImage(projectId: string, sceneId: string, cutId: string): Promise<string> {
    const cut = await this.findById(projectId, sceneId, cutId);
    const scene = await this.sceneService.findById(projectId, sceneId);
    
    // AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏ ÏûëÏÑ±
    const prompt = this.buildImageGenerationPrompt(scene, cut);
    
    try {
      // AI ÏÑúÎπÑÏä§Î•º ÌÜµÌï¥ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
      const imageResult = await this.aiService.callImageGenerations(prompt, {
        model: 'dall-e-3',
        size: '1024x1024',
        quality: 'standard'
      });

      if (imageResult.data && imageResult.data.length > 0) {
        const imageUrl = imageResult.data[0].url;
        
        // Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎã§Î©¥ ÏÇ≠Ï†ú
        if (cut.imageUrl) {
          try {
            await this.storageFactoryService.deleteImage(cut.imageUrl);
          } catch (error) {
            console.warn('Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
          }
        }

        // AIÏóêÏÑú ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄÎ•º Îã§Ïö¥Î°úÎìú
        const fileName = `ai_generated_${cutId}_${Date.now()}.png`;
        const tempFilePath = await this.aiService.downloadImageFromUrl(imageUrl, fileName);

        try {
          // Îã§Ïö¥Î°úÎìúÌïú ÌååÏùºÏùÑ base64Î°ú Î≥ÄÌôò
          const fileBuffer = fs.readFileSync(tempFilePath);
          const base64Data = fileBuffer.toString('base64');
          const imageData = `data:image/png;base64,${base64Data}`;

          // Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑúÎπÑÏä§Ïóê ÏóÖÎ°úÎìú
          const storageFileName = `cut_${cutId}_${Date.now()}_ai_generated.png`;
          const storageImageUrl = await this.storageFactoryService.uploadImage(
            imageData,
            storageFileName
          );

          // Ïª∑ ÏóÖÎç∞Ïù¥Ìä∏
          await this.cutModel.findOneAndUpdate(
            {
              _id: new Types.ObjectId(cutId),
              projectId: new Types.ObjectId(projectId),
              sceneId: new Types.ObjectId(sceneId),
              isDeleted: false
            },
            {
              imageUrl: storageImageUrl
            }
          );

          return storageImageUrl;
        } finally {
          // ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
          await this.aiService.cleanupTempFile(tempFilePath);
        }
      } else {
        throw new Error('AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®:', error);
      throw new Error('AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  }

  private buildImageGenerationPrompt(scene: SceneResponseDto, cut: CutResponseDto): string {
    const { title, description, cameraSetup, subjectMovement, productionMethod } = cut;
    
    let prompt = `ÏòÅÌôî Ï¥¨ÏòÅ Ïª∑ Ïù¥ÎØ∏ÏßÄ: ${title || 'ÏòÅÌôî Ï¥¨ÏòÅ Ïª∑'}`;
    
    if (description) {
      prompt += `\nÏÑ§Î™Ö: ${description}`;
    }
    
    // Ïî¨ Ïû•ÏÜå Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (scene && scene.location) {
      prompt += `\nÏû•ÏÜå: ${scene.location.name || 'ÎØ∏Ï†ï'}`;
      if (scene.location.address) {
        prompt += ` (${scene.location.address})`;
      }
    }
    
    // ÎÇ†Ïî® Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (scene && scene.weather) {
      prompt += `\nÎÇ†Ïî®: ${scene.weather}`;
    }
    
    // ÏãúÍ∞ÑÎåÄ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (scene && scene.sceneDateTime) {
      prompt += `\nÏãúÍ∞ÑÎåÄ: ${scene.sceneDateTime}`;
    }
    
    // Ï°∞Î™Ö Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (scene && scene.lighting) {
      prompt += `\nÏ°∞Î™Ö:`;
      if (scene.lighting.description) {
        prompt += ` ${scene.lighting.description}`;
      }
      if (scene.lighting.setup && scene.lighting.setup.overall) {
        if (scene.lighting.setup.overall.mood) {
          prompt += ` Î∂ÑÏúÑÍ∏∞: ${scene.lighting.setup.overall.mood}`;
        }
        if (scene.lighting.setup.overall.colorTemperature) {
          prompt += ` ÏÉâÏò®ÎèÑ: ${scene.lighting.setup.overall.colorTemperature}`;
        }
      }
    }
    
    // ÏãúÍ∞ÅÏ†Å ÏÑ§Î™Ö Ï∂îÍ∞Ä
    if (scene && scene.visualDescription) {
      prompt += `\nÏãúÍ∞ÅÏ†Å Î∞∞Í≤Ω: ${scene.visualDescription}`;
    }
    
    // ÌäπÏàòÌö®Í≥º Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (cut.vfxEffects) {
      prompt += `\nÌäπÏàòÌö®Í≥º: ${cut.vfxEffects}`;
    }
    
    if (cameraSetup) {
      prompt += `\nÏπ¥Î©îÎùº ÏÑ§Ï†ï:`;
      if (cameraSetup.shotSize) prompt += ` ÏÉ∑ ÏÇ¨Ïù¥Ï¶à: ${cameraSetup.shotSize}`;
      if (cameraSetup.angleDirection) prompt += ` ÏïµÍ∏Ä: ${cameraSetup.angleDirection}`;
      if (cameraSetup.cameraMovement) prompt += ` Ïπ¥Î©îÎùº ÏõÄÏßÅÏûÑ: ${cameraSetup.cameraMovement}`;
      if (cameraSetup.lensSpecs) prompt += ` Î†åÏ¶à: ${cameraSetup.lensSpecs}`;
    }
    
    if (subjectMovement && subjectMovement.length > 0) {
      prompt += `\nÌîºÏÇ¨Ï≤¥:`;
      subjectMovement.forEach(subject => {
        prompt += ` ${subject.name}(${subject.type})`;
        if (subject.position) prompt += ` ÏúÑÏπò: ${subject.position}`;
        if (subject.action) prompt += ` ÌñâÎèô: ${subject.action}`;
        if (subject.emotion) prompt += ` Í∞êÏ†ï: ${subject.emotion}`;
      });
    }
    
    if (productionMethod) {
      prompt += `\nÏ†úÏûë Î∞©Î≤ï: ${productionMethod === 'ai_generated' ? 'AI ÏÉùÏÑ±' : 'Ïã§ÏÇ¨ Ï¥¨ÏòÅ'}`;
    }
    
    prompt += `\n\nÍ≥†ÌíàÏßà ÏòÅÌôî Ï¥¨ÏòÅ Ïª∑ Ïù¥ÎØ∏ÏßÄ, ÏãúÎÑ§ÎßàÌã±Ìïú Î∂ÑÏúÑÍ∏∞, Ï†ÑÎ¨∏Ï†ÅÏù∏ Ï¥¨ÏòÅ Ïä§ÌÉÄÏùº, film still Ïä§ÌÉÄÏùº, Cinematic Composition`;
    
    return prompt;
  }

  getStorageInfo(): { type: string; bucket?: string; localPath?: string } {
    return this.storageFactoryService.getStorageInfo();
  }

  private mapToResponseDto(cut: Cut): CutResponseDto {
    return {
      _id: cut._id,
      sceneId: cut.sceneId,
      projectId: cut.projectId,
      title: cut.title,
      description: cut.description,
      cameraSetup: cut.cameraSetup,
      vfxEffects: cut.vfxEffects,
      soundEffects: cut.soundEffects,
      directorNotes: cut.directorNotes,
      dialogue: cut.dialogue,
      narration: cut.narration,
      subjectMovement: cut.subjectMovement,
      productionMethod: cut.productionMethod,
      productionMethodReason: cut.productionMethodReason,
      estimatedDuration: cut.estimatedDuration,
      specialRequirements: cut.specialRequirements,
      imageUrl: cut.imageUrl,
      order: cut.order,
      isDeleted: cut.isDeleted,
    };
  }
} 